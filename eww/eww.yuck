;; variables
(defvar eww "eww -c $HOME/.config/eww/")
;; (defvar current-workspace "hyprctl activeworkspace")

;; polls
(defpoll datetime :interval "1s" "scripts/datetime_info")
(defpoll volume :interval "1s" "scripts/getvol")
(defpoll battery-object 
  :initial `{"capacity": 100, "status": "Not Charging", "imagepath": "images/battery-full-solid-dark.png"}`
  :interval "2s" `eww state | grep 'EWW_BATTERY' | python scripts/get_battery_object.py`
)

;; listen
(deflisten music 
  :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
)

(deflisten active-workspace
  :initial "workspace>>1"
  "scripts/get_active_workspace_class"
)

(defwidget bar[]
  (box :class "bar-box"
    :hexpand false 
    :vexpand false
    (workspaces)
    (music)
    (right-widgets)
  )
)

(defwidget workspaces []
  (box :class "workspaces-box"
    :space-evenly true
    :halign "start"
    :spacing 5

    (eventbox
      :cursor "pointer"
      ;; (button :class "workspace-button active-workspace-button"
      (button :class {active-workspace == "workspace>>1" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 1"
        :width 40 
        (image
          :path "images/firefox-browser-light.png"
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>2" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 2"
        :width 40 
        (image
          :path "images/terminal-solid-light.png"
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>3" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 3"
        :width 40 
        (image
          :path "images/discord-light.png"
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>4" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 4"
        :width 40 
        (image
          :path "images/spotify-light.png"
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>5" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 5"
        :width 40 
        (image
          :path {active-workspace == "workspace>>5" ? "images/circle-solid-light.png" : "images/circle-regular-light.png"}
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>6" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 6"
        :width 40 
        (image
          :path {active-workspace == "workspace>>6" ? "images/circle-solid-light.png" : "images/circle-regular-light.png"}
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>7" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 7"
        :width 40 
        (image
          :path {active-workspace == "workspace>>7" ? "images/circle-solid-light.png" : "images/circle-regular-light.png"}
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>8" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 8"
        :width 40 
        (image
          :path {active-workspace == "workspace>>8" ? "images/circle-solid-light.png" : "images/circle-regular-light.png"}
          :image-width 16
          :image-height 16
        )
      )
    )

    (eventbox
      :cursor "pointer"
      (button :class {active-workspace == "workspace>>9" ? "workspace-button active-workspace-button" : "workspace-button"}
        :onclick "hyprctl dispatch workspace 9"
        :width 40 
        (image
          :path {active-workspace == "workspace>>9" ? "images/circle-solid-light.png" : "images/circle-regular-light.png"}
          :image-width 16
          :image-height 16
        )
      )
    )
  )
)

(defwidget music []
  (eventbox :class "music-eventbox"
    (box :class "music-box"
      :halign "center"
      (label
        :text {music != "" ? "ðŸŽµ ${music}" : ""}
        :width 200
        :show-truncated true
        :limit-width 60
      )
    )
  )
)

(defwidget right-widgets []
  (eventbox
    (box
      :spacing 10 ;; spacing in between widgets in this space
      :space-evenly false
      :halign "end" ;; place widgets at the end of this box
      (temp)
      (battery)
      (datetime)
    )
  )
)

(defwidget temp []
  (eventbox
    (box
      (label
        :text "${EWW_DISK["/"].used_perc}"
      )
    )
  )
)

(defwidget battery []
  (eventbox :class "battery-eventbox"
    :tooltip "${EWW_BATTERY.BAT1.capacity}% remaining, ${EWW_BATTERY.BAT1.status}"
    :halign "center" ;; shrinks overall widget
    (box
      :width 40;; change width of widget
      (image :class "battery-percentage-image"
        :path {battery-object.imagepath}
        :halign "center"
        :image-width 26
        :image-height 26
      )
    )
  )
)

(defwidget datetime []
  (eventbox
    :tooltip "current date/time"
    :cursor "pointer"
    :halign "end" ;; shrinks overall widget
    (button :class "datetime-button"
      (box :class "datetime-box"
        :space-evenly false
        (label :class "datetime-label"
          :markup "<span>${datetime}</span>"
        )
      )
    )
  )
)

(defwindow main
	:monitor 0
	:geometry (
      geometry 
        :x "0%"
        :y "0px"
        :width "99%"
        :height "40px"
        :anchor "top center"
	)
	:stacking "fg"
	:reserve (struts :distance "40px" :side "top")
	:wm-ignore false

	(bar)
)
